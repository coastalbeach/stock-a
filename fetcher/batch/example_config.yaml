# 批量股票历史数据获取 - 示例配置文件
# 这个文件展示了所有可配置的参数及其说明
# 复制并修改此文件来创建你的自定义配置

# =============================================================================
# 基本配置
# =============================================================================
basic:
  # 数据获取起始日期 (格式: YYYYMMDD)
  # 如果数据库中已有数据，会自动从最后更新日期开始增量获取
  start_date: "20050104"
  
  # 是否启用断点续传功能
  # 启用后会在程序中断时保存进度，重启时自动恢复
  enable_checkpoint: true
  
  # 断点续传文件路径 (相对于项目根目录)
  checkpoint_file: "data/batch_checkpoint.json"
  
  # 日志级别: DEBUG, INFO, WARNING, ERROR
  log_level: "INFO"

# =============================================================================
# 并发和性能配置
# =============================================================================
concurrency:
  # 最大并发线程数
  # 建议值: 4-16，过高可能导致API限流
  max_workers: 8
  
  # 每批处理的股票数量
  # 影响内存使用和处理效率
  batch_size: 50
  
  # 请求间隔时间 (秒)
  # 用于避免API限流，0表示无间隔
  request_interval: 0.1
  
  # 线程超时时间 (秒)
  # 单个线程的最大执行时间
  thread_timeout: 300

# =============================================================================
# 重试策略配置
# =============================================================================
retry:
  # 最大重试次数
  max_attempts: 3
  
  # 基础重试间隔 (秒)
  base_interval: 2
  
  # 退避因子 (指数退避)
  # 实际等待时间 = base_interval * (backoff_factor ^ 重试次数)
  backoff_factor: 2
  
  # 最大重试间隔 (秒)
  max_interval: 30

# =============================================================================
# 数据表配置
# =============================================================================
tables:
  # 不复权数据表名
  no_adjust_table: "股票历史行情_不复权"
  
  # 后复权数据表名
  hfq_table: "股票历史行情_后复权"
  
  # 主键字段列表 (用于数据去重和更新)
  primary_keys:
    - "股票代码"
    - "日期"

# =============================================================================
# 数据过滤配置
# =============================================================================
filtering:
  # 是否跳过ST股票
  skip_st_stocks: false
  
  # 是否跳过已退市股票
  skip_delisted_stocks: false
  
  # 最小市值要求 (亿元，0表示无限制)
  min_market_cap: 0
  
  # 股票代码前缀过滤 (空列表表示不过滤)
  # 例如: ["000", "002"] 只处理深市主板和中小板
  # 例如: ["600", "601", "603", "605"] 只处理沪市主板
  stock_code_prefixes: []

# =============================================================================
# 性能优化配置
# =============================================================================
performance:
  # 是否启用Redis缓存
  enable_redis_cache: true
  
  # 缓存过期时间 (秒)
  cache_expire_time: 3600
  
  # 是否启用数据库连接池
  enable_db_pool: true
  
  # 数据库连接池大小
  db_pool_size: 10
  
  # 批量插入大小
  # 单次插入的最大记录数，影响内存使用和插入效率
  bulk_insert_size: 1000

# =============================================================================
# 监控和进度配置
# =============================================================================
monitoring:
  # 是否显示进度条
  enable_progress_bar: true
  
  # 进度报告间隔 (处理多少只股票后报告一次)
  progress_report_interval: 100
  
  # 是否保存详细日志
  save_detailed_logs: true
  
  # 是否发送完成通知 (需要配置通知方式)
  send_completion_notification: false

# =============================================================================
# 错误处理配置
# =============================================================================
error_handling:
  # 遇到错误时是否继续处理其他股票
  continue_on_error: true
  
  # 是否保存错误详情到文件
  save_error_details: true
  
  # 错误日志文件路径 (相对于项目根目录)
  error_log_file: "logs/batch_errors.log"
  
  # 最大连续失败次数
  # 达到此数量后停止处理，防止大量无效请求
  max_consecutive_failures: 50

# =============================================================================
# 数据验证配置
# =============================================================================
validation:
  # 是否启用数据验证
  enable_data_validation: true
  
  # 是否检查重复数据
  check_duplicates: true
  
  # 是否检查数据格式
  check_data_format: true
  
  # 最大数据缺失率 (%)
  # 超过此比例的缺失数据会被标记为异常
  max_missing_data_rate: 10.0

# =============================================================================
# 调度配置 (高级功能)
# =============================================================================
scheduling:
  # 是否启用定时运行
  enable_scheduled_run: false
  
  # 定时运行时间 (24小时制)
  scheduled_time: "06:00"
  
  # 运行间隔 (天)
  run_interval_days: 1
  
  # 是否只在交易日运行
  trading_days_only: true

# =============================================================================
# 通知配置 (高级功能)
# =============================================================================
notification:
  # 通知方式: email, webhook, none
  method: "none"
  
  # 邮件通知配置 (当method为email时)
  email:
    smtp_server: "smtp.example.com"
    smtp_port: 587
    username: "your_email@example.com"
    password: "your_password"
    to_addresses:
      - "admin@example.com"
  
  # Webhook通知配置 (当method为webhook时)
  webhook:
    url: "https://your-webhook-url.com/notify"
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer your_token"

# =============================================================================
# 自定义股票列表 (可选)
# =============================================================================
custom_stocks:
  # 是否使用自定义股票列表
  use_custom_list: false
  
  # 自定义股票代码列表
  stock_codes:
    - "000001"  # 平安银行
    - "000002"  # 万科A
    - "600000"  # 浦发银行
    - "600036"  # 招商银行
    - "600519"  # 贵州茅台
  
  # 或者从文件读取股票列表
  stock_list_file: "data/custom_stock_list.txt"

# =============================================================================
# 开发和调试配置
# =============================================================================
debug:
  # 是否启用调试模式
  enable_debug: false
  
  # 调试模式下只处理的股票数量 (0表示处理全部)
  debug_stock_limit: 10
  
  # 是否保存原始API响应数据
  save_raw_responses: false
  
  # 原始响应数据保存目录
  raw_data_dir: "data/raw_responses"
  
  # 是否启用性能分析
  enable_profiling: false

# =============================================================================
# 数据质量配置
# =============================================================================
data_quality:
  # 价格数据异常检测
  price_anomaly_detection:
    # 是否启用价格异常检测
    enabled: true
    
    # 单日涨跌幅阈值 (%)
    # 超过此阈值的数据会被标记为可疑
    max_daily_change: 20.0
    
    # 价格为零的处理方式: skip, warning, error
    zero_price_handling: "warning"
  
  # 成交量异常检测
  volume_anomaly_detection:
    # 是否启用成交量异常检测
    enabled: true
    
    # 成交量为零的连续天数阈值
    max_zero_volume_days: 5
  
  # 数据完整性检查
  completeness_check:
    # 是否检查数据完整性
    enabled: true
    
    # 允许的最大数据缺口 (天)
    max_data_gap_days: 10

# =============================================================================
# 备份和恢复配置
# =============================================================================
backup:
  # 是否启用数据备份
  enable_backup: false
  
  # 备份目录
  backup_dir: "data/backups"
  
  # 备份频率: daily, weekly, monthly
  backup_frequency: "weekly"
  
  # 保留备份文件数量
  keep_backup_count: 4
  
  # 备份压缩格式: none, gzip, zip
  compression: "gzip"